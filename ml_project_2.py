# -*- coding: utf-8 -*-
"""ML project 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RslJVV-1AEbYMWtNKg0sIU3f_kBFHiPm
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/drive/MyDrive/ML Projects/p2 - Diabetes.csv')

print(data.head(10))

x = data.drop(columns = 'Outcome', axis=1)
y = data['Outcome']

print(x)
print(y)

data.describe()

data.info()

data.isnull().sum()

data['Outcome'].value_counts()

x = data.drop(columns = 'Outcome' , axis = 1)
y = data['Outcome']

print(x)
print(y)

scaler = StandardScaler()

stddata = scaler.fit_transform(x)

print(x)

print(stddata)

x = stddata
print(x)

x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.2,stratify = y , random_state=1) # Spliting the Data

print(x.shape , x_train.shape , x_test.shape)

classifier = svm.SVC(kernel='linear') # Building a Model

classifier.fit(x_train,y_train)

x_train_prediction = classifier.predict(x_train) # Accuracy Score of Training Data
training_data_accuracy = accuracy_score(x_train_prediction , y_train)
print(training_data_accuracy)

#  Accuracy Score for Testing Data
x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)
print(test_data_accuracy)

# Making a Predictive System
input_data = (5,116,74,0,0,25.6,0.201,30)
# Convert the data into np.array
converted_np_array = np.asarray(input_data)
# Reshape The Array as we are predicting for one instance
reshaped_array = converted_np_array.reshape(1,-1)
# Standardize the Data as we done above
std_data = scaler.transform(reshaped_array)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The Person is not a Diabetic')
else :
  print('The Person is a Diabetic')







